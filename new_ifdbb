#!/usr/bin/perl


if ($#ARGV < 0) {
    print "Usage: $0 new station files\n\n";
    print "Insert content of file 'new' for the 'ifdbb' procedure of 'station' in 'files'.\n\n";
    print " - Version 1.0\n";
    print " - The 'files' should be '.skd' schedules for broadband observations that\n";
    print "   contain a section for 'station' in the '\$PROCS' block.\n";
    print " - File 'new' must start with a 'define  ifdbb ' line and end with an 'enddef'\n";
    print "   line.\n";
    print " - A line that is known to be correct in all details is always used in place\n";
    print "   of the first line in 'new'.\n";
    print " - A progress report is printed during processing. It may be useful for\n";
    print "   troubleshooting, e.g., 'station' (which is case sensitive) being misspelled.\n";
    print " - DOS/Windows line endings in 'new' and the input 'files' will be converted to\n";
    print "   UNIX line endings while being copied to the output 'files'.\n";
    print " - The original input 'files' are renamed with a '.bak' extension as a backup.\n";
    print "   The are used to automatically recover from some errors and can be used\n";
    print "   manually recover from any others.\n";
    exit -1;
}

$new = shift or die "Try $0 for help\n";
open(NEW,$new) || die "Can't open $new\n";

$station = shift or die "Try $0 for help\n";

FILE: foreach $name (@ARGV) {
    print "Processing $name\n";
    $bak = $name . ".bak";
    $out = $name;
    if (!-e $name) {
        die "Can't find $name Quitting.\n";
    }

# rename the original if we can and open the files

    if (-e $bak) {
        die "Backup-file $bak already exists, giving up.\n";
    }

    rename ($out,$bak) ||die "renaming $out to $bak failed: $!, giving up.\n";

    if(!open(BAK,$bak)) {
        print "Failed to open $bak: $!\n";
        if(!rename($bak,$out)) {
            print "Unable to rename $bak to $out: $!\n";
            die "Please fix whatever the problem is and rename it yourself.\n";
        } else {
            die "I renamed $bak to $out for you.\n";
        }
    }

    if(!open(OUT,">" . $out)) {
        print "Failed to open $out: $!\n";
        if((!close(BAK)) || (!rename($bak,$out))) {
            print "Unable to rename $bak to $out: $!\n";
            die "Please fix whatever the problem is and rename it yourself.\n";
        } else {
          die "I renamed $bak to $out for you.\n";
        }
    }

#process

    $line=0;
    $change=0;
    $procs_found=0;
    $station_found=0;
    $ifdbb_found=0;
    $enddef_found=0;

    while(<BAK>) {
        s/\r//;
        $line++;
        if (!$procs_found) {
            if(/^\$PROCS$/) {
                print "Found \$PROCS\n";
                $procs_found=1;
            }
            print OUT;
            next;
        }
        if(!$station_found) {
            if(/^BEGIN +(\w+) *$/) {
                print "Found $1\n";
                if ($1 eq $station) {
                    $station_found = 1;
                }
            }
            print OUT;
            next;
        }
        if(!$ifdbb_found) {
            if(/^END /) {
                last;
            } elsif(/^define  ifdbb /) {
                print "Found old ifdbb\n";
                $ifdbb_found = 1;
                $new_lines=0;
                $enddef_line=0;
                $newdef_found=0;
                while(<NEW>) {
                    s/\r//;
                    $new_lines++;
                    if(/^define  ifdbb / && $new_lines == 1) {
                        $_ = "define  ifdbb         00000000000x\n";
                        $newdef_found=1;
                    } elsif(/^enddef$/) {
                        $enddef_line=$new_lines;
                    }
                    print OUT;
                }
                if(!$newdef_found || $enddef_line != $new_lines) {
                    last;
                }
                print "New ifdbb inserted\n";
                $change=1;
                while(<BAK>) {
                    s/\r//;
                    if (/^enddef/) {
                        $enddef_found=1;
                        last;
                    } else {
                        next;
                    }
                }
                next;
            } else {
                print OUT;
                next;
            }
        }
        print OUT;
    }
    $rename=1;
    if(!$procs_found) {
        print "Warning: $PROCS not found in $name.\n";
    } elsif(!$station_found) {
        print "Warning: $station procedures not found in $name.\n";
    } elsif(!$ifdbb_found) {
        print "Warning: ifdbb procedure for $station not found in $name.\n";
    } elsif(!$newdef_found || $enddef_line != $new_lines) {
        print "Warning: contents of $new malformed.\n";
    } elsif(!$enddef_found) {
        print "Warning: No enddef for original ifdbb procedure was found.\n";
    } else {
        $rename=0;
    }
    if(!close(OUT)) {
        $rename=1;
    print "Warning: Unable to close to $out: $!\n";
    }
    if(!close(BAK)) {
        $rename=1;
    print "Warning: Unable to close to $bak: $!\n";
    }

    if($rename || $change == 0) {
        if(!rename($bak,$out)) {
            print "Warning: Unable to rename '$bak' to '$out': $!\n";
            if($rename) {
                print "Warning: Please fix whatever the problem is and rename it yourself,\n";
                print "Warning: probably using 'mv $bak $out'\n";
            } else {
                print "Warning: It appears that $out did not need any changes,\n";
                print "Warning: but to be safe you should probably \"";
                print "Warning: use 'mv $bak $out'\n";
            }
        } elsif($rename) {
            print "Warning: I renamed '$bak' to '$out' for you.\n";

        }
    }
}
